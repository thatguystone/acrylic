package crawl

import (
	"net/http"
	"path/filepath"
	"testing"

	"github.com/thatguystone/cog/check"
)

var (
	gifBin = []byte{
		0x47, 0x49, 0x46, 0x38, 0x37, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80,
		0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x44, 0x01,
		0x00, 0x3b,
	}

	pngBin = []byte{
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00,
		0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xde,
		0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b,
		0x13, 0x00, 0x00, 0x0b, 0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00,
		0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xdf, 0x06, 0x03,
		0x16, 0x11, 0x34, 0xd8, 0x8f, 0x56, 0x73, 0x00, 0x00, 0x00, 0x19,
		0x74, 0x45, 0x58, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
		0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
		0x74, 0x68, 0x20, 0x47, 0x49, 0x4d, 0x50, 0x57, 0x81, 0x0e, 0x17,
		0x00, 0x00, 0x00, 0x0c, 0x49, 0x44, 0x41, 0x54, 0x08, 0xd7, 0x63,
		0xf8, 0xff, 0xff, 0x3f, 0x00, 0x05, 0xfe, 0x02, 0xfe, 0xdc, 0xcc,
		0x59, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae,
		0x42, 0x60, 0x82,
	}
)

type crawlTest struct {
	*check.C
	fs      *check.FS
	cleanup func()
}

func newTest(t *testing.T) crawlTest {
	c := check.New(t)
	fs, cleanup := c.FS()

	return crawlTest{
		C:       c,
		fs:      fs,
		cleanup: cleanup,
	}
}

func (ct crawlTest) exit() {
	ct.cleanup()
}

func (ct crawlTest) run(h http.Handler) {
	Run(Args{
		Handler: h,
		Output:  ct.fs.GetDataDir(),
		Logf:    ct.Logf,
	})

	ct.fs.DumpTree("/")
}

type stringHandler string

func (h stringHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	bytesHandler(h).ServeHTTP(w, r)
}

type bytesHandler []byte

func (h bytesHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch filepath.Ext(r.URL.Path) {
	case ".css":
		w.Header().Set("Content-Type", "text/css")
	}

	w.Write(h)
}

func TestBasic(t *testing.T) {
	ct := newTest(t)
	defer ct.exit()

	mux := http.NewServeMux()
	mux.Handle("/",
		stringHandler(`<!DOCTYPE html>
			<link href="/static/all.css" rel="stylesheet">
			Index <a href="/test">Test</a>`))
	mux.Handle("/test/",
		stringHandler(`<!DOCTYPE html>
			Test <a href="/">Index</a>`))
	mux.Handle("/static/img.gif", bytesHandler(gifBin))
	mux.Handle("/static/all.css",
		stringHandler(`
			html {
				background: url(/static/img.gif);
			}

			a {
				background: url("/static/img.gif");
				color: #e5e5e5;
			}
		`))

	ct.NotPanics(func() {
		ct.run(mux)
	})

	index := ct.fs.SReadFile("index.html")
	ct.Contains(index, `<a href="/test/">`) // URL should be rewritten

	test := ct.fs.SReadFile("test/index.html")
	ct.Contains(test, `<a href="/">`) // URL should not be rewritten

	css := ct.fs.SReadFile("static/all.css")
	ct.Contains(css, `url(/static/img.gif)`)
}
